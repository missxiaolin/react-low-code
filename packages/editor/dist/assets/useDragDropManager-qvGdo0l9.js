import{C as g,i as l,D as v}from"./index-CISSGvlG.js";var m=function e(t,r){if(t===r)return!0;if(t&&r&&typeof t=="object"&&typeof r=="object"){if(t.constructor!==r.constructor)return!1;var o,n,c;if(Array.isArray(t)){if(o=t.length,o!=r.length)return!1;for(n=o;n--!==0;)if(!e(t[n],r[n]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if(c=Object.keys(t),o=c.length,o!==Object.keys(r).length)return!1;for(n=o;n--!==0;)if(!Object.prototype.hasOwnProperty.call(r,c[n]))return!1;for(n=o;n--!==0;){var s=c[n];if(!e(t[s],r[s]))return!1}return!0}return t!==t&&r!==r};const R=g(m),h=window.React.useEffect,C=window.React.useLayoutEffect,p=typeof window<"u"?C:h,O=window.React.useCallback,E=window.React.useState;function x(e,t,r){const[o,n]=E(()=>t(e)),c=O(()=>{const s=t(e);R(o,s)||(n(s),r&&r())},[o,e,r]);return p(c),[o,c]}function D(e,t,r){const[o,n]=x(e,t,r);return p(function(){const s=e.getHandlerId();if(s!=null)return e.subscribeToStateChange(n,{handlerIds:[s]})},[e,n]),o}function k(e,t,r){return D(t,e||(()=>({})),()=>r.reconnect())}const S=window.React.useMemo;function q(e,t){const r=[...t||[]];return t==null&&typeof e!="function"&&r.push(e),S(()=>typeof e=="function"?e():e,r)}function L(e,t,r){const o=r.getRegistry(),n=o.addTarget(e,t);return[n,()=>o.removeTarget(n)]}function V(e,t,r){const o=r.getRegistry(),n=o.addSource(e,t);return[n,()=>o.removeSource(n)]}function b(e,t,r,o){let n;if(n!==void 0)return!!n;if(e===t)return!0;if(typeof e!="object"||!e||typeof t!="object"||!t)return!1;const c=Object.keys(e),s=Object.keys(t);if(c.length!==s.length)return!1;const d=Object.prototype.hasOwnProperty.bind(t);for(let u=0;u<c.length;u++){const a=c[u];if(!d(a))return!1;const y=e[a],w=t[a];if(n=void 0,n===!1||n===void 0&&y!==w)return!1}return!0}function F(e){return e!==null&&typeof e=="object"&&Object.prototype.hasOwnProperty.call(e,"current")}const f=window.React.cloneElement,I=window.React.isValidElement;function j(e){if(typeof e.type=="string")return;const t=e.type.displayName||e.type.name||"the component";throw new Error(`Only native element nodes can now be passed to React DnD connectors.You can either wrap ${t} into a <div>, or turn it into a drag source or a drop target itself.`)}function H(e){return(t=null,r=null)=>{if(!I(t)){const c=t;return e(c,r),c}const o=t;return j(o),M(o,r?c=>e(c,r):e)}}function W(e){const t={};return Object.keys(e).forEach(r=>{const o=e[r];if(r.endsWith("Ref"))t[r]=e[r];else{const n=H(o);t[r]=()=>n}}),t}function i(e,t){typeof e=="function"?e(t):e.current=t}function M(e,t){const r=e.ref;return l(typeof r!="string","Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs"),r?f(e,{ref:o=>{i(r,o),i(t,o)}}):f(e,{ref:t})}const P=window.React.useContext;function z(){const{dragDropManager:e}=P(v);return l(e!=null,"Expected drag drop context"),e}export{p as a,q as b,k as c,L as d,F as i,V as r,b as s,z as u,W as w};
